// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum AttendanceType {
    Service
    CG
}

enum UserRole {
    ZL_TL
    CGL
    OM
    NB
    NF
}

enum CGRole {
    CGL
    FL
    Member
}

enum Cluster {
    Heart
    Strike
    Force
    Move
    Mind
    Voice
}

enum Gender {
    Male
    Female
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [uid], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [uid], onDelete: Cascade)

    @@index([userId])
}

model User {
    uid         Int      @id @unique @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    status      UserRole @default(OM)
    age         Int      @db.Int
    icNo        String   @db.Char(14)
    fullName    String   @db.Text
    nickName    String?  @db.Text
    email       String   @unique @db.VarChar(250)
    image       String?
    address     Address  @relation(fields: [addressId], references: [id])
    cluster     Cluster?
    phoneNumber String?  @db.VarChar(11)
    cellGroup   Cell     @relation(fields: [cellId], references: [id])
    cgRole      CGRole   @default(Member)
    password    String?  @db.Text
    gender      Gender   @default(Male)

    accounts   Account[]
    sessions   Session[]
    addressId  String
    cellId     String
    attendance Attendance[]

    @@index([addressId])
    @@index([cellId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Address {
    id       String @id @unique @default(cuid())
    street   String @db.Text
    state    String @db.Text
    city     String @db.Text
    country  String @db.Text
    postCode String @db.VarChar(10)
    users    User[]
}

model Cell {
    id         String       @id @unique
    users      User[]
    attendance Attendance[]
}

model Attendance {
    id        String         @id @unique @default(cuid())
    type      AttendanceType
    user      User           @relation(fields: [userUid], references: [uid])
    cellGroup Cell           @relation(fields: [cellId], references: [id])
    date      DateTime
    userUid   Int
    cellId    String

    @@index([userUid])
    @@index([cellId])
}
